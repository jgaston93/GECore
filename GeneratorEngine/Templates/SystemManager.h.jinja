#ifndef SYSTEM_MANAGER_HPP
#define SYSTEM_MANAGER_HPP
{% for system in systems_model %}
#include "{{ system }}System.hpp"
{%- endfor %}

#include "Scene/Scene.hpp"

class SystemManager
{
public:
  template<typename T>
  void addEntity(Entity)
  {
    /* NO ACTION */
  }
  template<typename T>
  void removeEntity(Entity)
  {
    /* NO ACTION */
  }
  
  void init()
  {
    {%- for system in systems_model %}
    m_{{ system|lower }}_system.init();
    {%- endfor %}
  }

  void update(const Time dt_ms)
  {
    {%- for system in systems_model %}
    m_{{ system|lower }}_system.update(dt_ms);
    {%- endfor %}
  }

  void loadScene(Scene *scene)
  {
    {%- for system in systems_model %}
    m_{{ system|lower }}_system.loadScene(scene);
    {%- endfor %}
  }

  void entityDestroyed(Entity entity)
  {
    {%- for system in systems_model %}
    m_{{ system|lower }}_system.removeEntity(entity);
    {%- endfor %}
  }
private:
  {%- for system in systems_model %}
  {{ system }}System m_{{ system|lower }}_system;
  {%- endfor %}
};

#endif // SYSTEM_MANAGER_HPP