#ifndef COMPONENT_MANAGER_HPP
#define COMPONENT_MANAGER_HPP
{% for component in components_model %}
#include "{{ component }}.hpp"
{%- endfor %}

#include "ComponentArray.hpp"
#include "Entity.hpp"

class ComponentManager
{
public:
  template<typename T>
  void addComponent(Entity, const T&)
  {
    /* NO ACTION */
  }

  template<typename T>
  void removeComponent(Entity)
  {
    /* NO ACTION */
  }

  template<typename T>
  void getComponent(Entity, T* component)
  {
    component = nullptr;
  }

  void entityDestroyed(Entity entity)
  {
    {%- for component in components_model %}
    m_{{ component|lower }}_array.removeComponent(entity);
    {%- endfor %}
  }
private:
  {%- for component in components_model %}
  ComponentArray<{{ component }}> m_{{ component|lower }}_array;
  {%- endfor %}
};

#endif // COMPONENT_MANAGER_HPP